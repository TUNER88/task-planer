{"version":3,"sources":["components/Project/DateRow.module.css","components/Calendar/Calendar.module.css","components/ProjectList/ProjectList.module.css","components/TaskList/AddTaskButton.module.css","components/Task/Header.module.css","components/Forms/Task/ProjectPicker.js","components/Forms/Task/index.js","actions/index.js","containers/Forms/Task.js","components/Calendar/Calendar.js","components/Calendar/index.js","containers/Calendar.js","components/TaskFilter/sortOptions.js","config/initialState.js","components/Progress/index.js","components/Progress/Progress.js","components/Project/DateRow.js","components/Project/Project.js","components/Project/index.js","containers/Project.js","components/Buttons/NewProject.js","containers/Buttons/NewProject.js","components/ProjectList/ProjectList.js","components/ProjectList/index.js","containers/ProjectList.js","components/TaskList/AddTaskButton.js","components/Task/Badge/Badge.js","components/Task/Badge/index.js","components/Task/Header.js","components/Task/Task.js","components/Task/index.js","containers/Task.js","components/TaskFilter/TaskFilter.js","components/TaskFilter/index.js","containers/TaskFilter.js","components/TaskList/TaskList.js","components/TaskList/index.js","containers/TaskList.js","containers/Overview.js","App.js","serviceWorker.js","utils/index.js","reducers/projects.js","reducers/tasks.js","reducers/ui.js","reducers/index.js","index.js"],"names":["module","exports","container","date","addIcon","text","ProjectPicker","_ref","projects","projectId","onChange","projectLabels","map","project","value","id","label","title","react_default","a","createElement","picker_default","data","cols","list_default","Item","arrow","displayName","defaultData","startTime","Date","endTime","DateTime","local","set","hour","minute","toJSDate","Task","addTask","updateTask","task","onClose","_useState","useState","_useState2","Object","slicedToArray","setData","isEdit","Boolean","repeatModes","renderHeader","input_item_default","placeholder","objectSpread","Task_ProjectPicker","values","date_picker_default","minuteStep","textarea_item_default","notes","rows","autoHeight","button_default","type","size","inline","onClick","newData","style","marginLeft","selectProject","connect","state","props","events","tasks","dispatch","localizer","momentLocalizer","moment","Calendar","activeTask","setActiveTask","editActive","className","styles","containers_Forms_Task","onSave","react_big_calendar_esm","startAccessor","endAccessor","eventPropGetter","event","backgroundColor","color","border","onSelectEvent","sortOptions","uuid","require","uuids","p1","p2","p3","t1","t2","t3","t4","t5","t6","t7","initialState","_projects","defineProperty","_tasks","completed","ui","activeProject","taskFilter","taskSortOption","taskSortOptions","Progress","total","progress","Math","round","flex_default","progress_default","percent","position","DateRow","dt","fromJSDate","toLocaleString","weekday","month","day","year","Project","taskCount","completedTaskCount","nextTaskTime","Project_Item","borderLeft","concat","Project_DateRow","components_Progress","getProjectTasks","filter","t","getNextTaskTime","incompletTasks","sort","b","length","getProject","projectTasks","completedTasks","getProgressDetails","prompt","modal_default","NewProject","addProject","index_esm","onPress","undefined","ProjectList","containers_Buttons_NewProject","index","containers_Project","key","AddTaskButton","thumb","Badge","badge_default","padding","borderRadius","borderStyle","borderWidth","borderColor","Header","showProjectTitle","start","end","from","TIME_24_SIMPLE","to","Task_Badge","onEdit","onDelete","toggleTaskCompletion","collapsed","setCollapsed","swipe_action_default","autoClose","right","e","target","checkbox_default","defaultChecked","Task_Header","Brief","split","item","react","TaskFilter","_options","setFilter","sortOption","setSortOption","options","optionNames","optionIndex","keys","indexOf","Fragment","search_bar_default","maxLength","cancelText","wing_blank_default","segmented_control_default","onValueChange","name","option","find","selectedIndex","search","setTaskFilter","setTaskSortOption","TaskList","projectTitle","removeTask","isFormVisible","setFormVisibility","_useState3","_useState4","taskToEdit","setTaskToEdit","containers_TaskFilter","containers_Task","assign","TaskList_AddTaskButton","defaultProps","getProjectTitle","sortMap","_sortMap","textA","toUpperCase","textB","getVisibleTasks","_state$ui","includes","Overview_sortMap","VIEW_PROJECTS","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","docked","activeView","onChangeView","setState","nativeEvent","setActiveProject","bind","assertThisInitialized","listActive","calendarActive","overviewActive","views","lib_default","containers_ProjectList","containers_TaskList","containers_Calendar","Overview","nav_bar_default","mode","React","Component","window","location","hostname","match","getRandomColor","h","floor","random","s","l","arguments","action","newUuid","newState","combineReducers","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","locale_provider_default","locale","enUS","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,UAAA,2BAAAC,KAAA,4CCAlBH,EAAAC,QAAA,CAAkBC,UAAA,kDCAlBF,EAAAC,QAAA,CAAkBG,QAAA,mDCAlBJ,EAAAC,QAAA,CAAkBI,KAAA,kDCAlBL,EAAAC,QAAA,CAAkBE,KAAA,ylBCIZG,EAAgB,SAAAC,GAAuC,IAApCC,EAAoCD,EAApCC,SAAUC,EAA0BF,EAA1BE,UAAWC,EAAeH,EAAfG,SACtCC,EAAgBH,EAASI,IAAI,SAAAC,GACjC,MAAO,CAAEC,MAAOD,EAAQE,GAAIC,MAAOH,EAAQI,SAG7C,OACEC,EAAAC,EAAAC,cAAAC,EAAAF,EAAA,CACEG,KAAMX,EACNY,KAAM,EACNb,SAAUA,EACVI,MAAO,CAACL,IAERS,EAAAC,EAAAC,cAAAI,EAAAL,EAAMM,KAAN,CAAWC,MAAM,cAAjB,aAWNpB,EAAcqB,YAAc,gBAEbrB,QCfTmB,EAAOD,EAAAL,EAAKM,KAOZG,EAAc,CAClBC,UAAW,IAAIC,KACfC,QAASC,WAASC,QACfC,IAAI,CAAEC,KAAM,EAAGC,OAAQ,IACvBC,YAGCC,EAAO,SAAA/B,GAAiE,IAA9DgC,EAA8DhC,EAA9DgC,QAASC,EAAqDjC,EAArDiC,WAAYhC,EAAyCD,EAAzCC,SAAUC,EAA+BF,EAA/BE,UAAWgC,EAAoBlC,EAApBkC,KAAMC,EAAcnC,EAAdmC,QAAcC,EACpDC,mBAASH,GAAQb,GADmCiB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrErB,EADqEuB,EAAA,GAC/DG,EAD+DH,EAAA,GAEtEI,EAASC,QAAQT,GAEjBU,EAAc,CAClB,CACEnC,MAAO,OACPF,MAnBmB,GAqBrB,CACEE,MAAO,QACPF,MAtBoB,GAwBtB,CACEE,MAAO,SACPF,MAzBqB,GA2BvB,CACEE,MAAO,UACPF,MA5BsB,IAsD1B,OACEI,EAAAC,EAAAC,cAAAI,EAAAL,EAAA,CAAMiC,aALa,WACnB,OAAOH,EAAS,OAAS,aAKvB/B,EAAAC,EAAAC,cAAAiC,EAAAlC,EAAA,CAAWL,MAAOQ,EAAKL,MAAOqC,YAAY,QAAQ5C,SApBrC,SAAAO,GAAK,OAAI+B,EAAQF,OAAAS,EAAA,EAAAT,CAAA,GAAKxB,EAAN,CAAYL,cAqBzCC,EAAAC,EAAAC,cAACoC,EAAD,CACEhD,SAAUA,EACVC,UAAWa,EAAKb,WAAaA,EAC7BC,SAAU,SAAA+C,GAAM,OAtBD1C,EAsBkB0C,EAAO,GAtBnBT,EAAQF,OAAAS,EAAA,EAAAT,CAAA,GAAKxB,EAAN,CAAYb,UAAWM,KAApC,IAAAA,KAwBjBG,EAAAC,EAAAC,cAAAsC,EAAAvC,EAAA,CAAYL,MAAOQ,EAAKO,UAAWnB,SA9BtB,SAAAmB,GAAS,OAAImB,EAAQF,OAAAS,EAAA,EAAAT,CAAA,GAAKxB,EAAN,CAAYO,iBA+B3CX,EAAAC,EAAAC,cAAAI,EAAAL,EAAMM,KAAN,CAAWC,MAAM,cAAjB,UAEFR,EAAAC,EAAAC,cAAAsC,EAAAvC,EAAA,CAAYL,MAAOQ,EAAKS,QAASrB,SAhClB,SAAAqB,GACjB,OAAOiB,EAAQF,OAAAS,EAAA,EAAAT,CAAA,GAAKxB,EAAN,CAAYS,eAgCtBb,EAAAC,EAAAC,cAAAI,EAAAL,EAAMM,KAAN,CAAWC,MAAM,cAAjB,QAEFR,EAAAC,EAAAC,cAAAC,EAAAF,EAAA,CAAQG,KAAM6B,EAAa5B,KAAM,EAAGoC,WAAY,GAC9CzC,EAAAC,EAAAC,cAAAI,EAAAL,EAAMM,KAAN,CAAWC,MAAM,cAAjB,WAEFR,EAAAC,EAAAC,cAAAwC,EAAAzC,EAAA,CACEL,MAAOQ,EAAKuC,MACZnD,SApCW,SAAAmD,GAAK,OAAIb,EAAQF,OAAAS,EAAA,EAAAT,CAAA,GAAKxB,EAAN,CAAYuC,YAqCvCC,KAAM,EACNR,YAAY,QACZS,YAAU,IAEZ7C,EAAAC,EAAAC,cAACK,EAAD,KACEP,EAAAC,EAAAC,cAAA4C,EAAA7C,EAAA,CAAQ8C,KAAK,UAAUC,KAAK,QAAQC,QAAM,EAACC,QAvC9B,WACjB,IAAMC,EAAOvB,OAAAS,EAAA,EAAAT,CAAA,GACRxB,EADQ,CAEXb,UAAWa,EAAKb,WAAaA,IAG/BwC,EAAST,EAAW6B,GAAW9B,EAAQ8B,GACvC3B,MAgCI,QAGAxB,EAAAC,EAAAC,cAAA4C,EAAA7C,EAAA,CACEiD,QAAS,WACP1B,KAEFwB,KAAK,QACLC,QAAM,EACNG,MAAO,CAAEC,WAAY,UANvB,aAsBRjC,EAAKX,YAAc,OAEJW,QCzHFC,EAAU,SAAAjB,GAAI,MAAK,CAC9B2C,KAAM,WACN3C,SAuBWkD,EAAgB,SAAAzD,GAAE,MAAK,CAClCkD,KAAM,iBACNlD,OCjBa0D,cAVS,SAACC,EAAOC,GAAR,OAAA7B,OAAAS,EAAA,EAAAT,CAAA,CACtB8B,OAAQ9B,OAAOW,OAAOiB,EAAMG,OAC5BrE,SAAUsC,OAAOW,OAAOiB,EAAMlE,WAC3BmE,IAGsB,SAAAG,GAAQ,MAAK,CACtCtC,WAAY,SAAAlB,GAAI,OAAIwD,EDFI,SAAAxD,GAAI,MAAK,CACjC2C,KAAM,cACN3C,QCA6BkB,CAAWlB,OAG3BmD,CAGbnC,qBCVIyC,GAAYC,YAAgBC,KAE5BC,GAAW,SAAA3E,GAA0B,IAAvBqE,EAAuBrE,EAAvBqE,OAAQpE,EAAeD,EAAfC,SAAemC,EACLC,mBAAS,MADJC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClCwC,EADkCtC,EAAA,GACtBuC,EADsBvC,EAAA,GAEnCwC,EAAanC,QAAQiC,GAQ3B,OACEjE,EAAAC,EAAAC,cAAA,OAAKkE,UAAWC,IAAOrF,WACpBmF,GACCnE,EAAAC,EAAAC,cAACoE,EAAD,CAAU/C,KAAM0C,EAAYzC,QALhB,kBAAM0C,EAAc,OAKgBK,OAAQ,gBAExDJ,GACAnE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CACEd,OAAQA,EACRG,UAAWA,GACXY,cAAc,YACdC,YAAY,UACZC,gBAAiB,SAAAC,GAAK,MAAK,CACzBxB,MAAO,CACLyB,gBAAiBvF,EAASsF,EAAMrF,WAAWuF,MAC3CC,OAAQ,iCAGZC,cAvBc,SAAAzD,GACpB2C,EAAc3C,QA+BlByC,GAASvD,YAAc,WAERuD,UC/CAA,GD+CAA,GEvCAT,eALS,SAAAC,GAAK,MAAK,CAChCE,OAAQ9B,OAAOW,OAAOiB,EAAMG,OAC5BrE,SAAUkE,EAAMlE,WAGHiE,CAAyBS,aCNzBiB,GAHK,OAGLA,GAFW,aCCpBC,GAAOC,EAAQ,IAEfC,GAAQ,CACZC,GAAIH,KACJI,GAAIJ,KACJK,GAAIL,KACJM,GAAIN,KACJO,GAAIP,KACJQ,GAAIR,KACJS,GAAIT,KACJU,GAAIV,KACJW,GAAIX,KACJY,GAAIZ,MAwFSa,GArFM,CACnBzG,UAAQ0G,GAAA,GAAApE,OAAAqE,GAAA,EAAArE,CAAAoE,GACLZ,GAAMC,GAAK,CACVxF,GAAIuF,GAAMC,GACVtF,MAAO,YACP+E,MAAO,YAJHlD,OAAAqE,GAAA,EAAArE,CAAAoE,GAMLZ,GAAME,GAAK,CACVzF,GAAIuF,GAAME,GACVvF,MAAO,YACP+E,MAAO,YATHlD,OAAAqE,GAAA,EAAArE,CAAAoE,GAWLZ,GAAMG,GAAK,CACV1F,GAAIuF,GAAMG,GACVxF,MAAO,YACP+E,MAAO,YAdHkB,IAiBRrC,OAAKuC,GAAA,GAAAtE,OAAAqE,GAAA,EAAArE,CAAAsE,GACFd,GAAMI,GAAK,CACV3F,GAAIuF,GAAMI,GACVjG,UAAW6F,GAAMC,GACjBtF,MAAO,SACPoG,WAAW,EACXxF,UAAW,IAAIC,KAAK,uBACpBC,QAAS,IAAID,KAAK,uBAClB+B,MAAO,kBARNf,OAAAqE,GAAA,EAAArE,CAAAsE,GAUFd,GAAMK,GAAK,CACV5F,GAAIuF,GAAMK,GACVlG,UAAW6F,GAAMC,GACjBtF,MAAO,SACPoG,WAAW,EACXxF,UAAW,IAAIC,KAAK,uBACpBC,QAAS,IAAID,KAAK,yBAhBjBgB,OAAAqE,GAAA,EAAArE,CAAAsE,GAkBFd,GAAMM,GAAK,CACV7F,GAAIuF,GAAMM,GACVnG,UAAW6F,GAAMC,GACjBtF,MAAO,SACPoG,WAAW,EACXxF,UAAW,IAAIC,KAAK,uBACpBC,QAAS,IAAID,KAAK,yBAxBjBgB,OAAAqE,GAAA,EAAArE,CAAAsE,GA0BFd,GAAMO,GAAK,CACV9F,GAAIuF,GAAMO,GACVpG,UAAW6F,GAAME,GACjBvF,MAAO,SACPoG,WAAW,EACXxF,UAAW,IAAIC,KAAK,uBACpBC,QAAS,IAAID,KAAK,yBAhCjBgB,OAAAqE,GAAA,EAAArE,CAAAsE,GAmCFd,GAAMQ,GAAK,CACV/F,GAAIuF,GAAMQ,GACVrG,UAAW6F,GAAMG,GACjBxF,MAAO,SACPoG,WAAW,EACXxF,UAAW,IAAIC,KAAK,uBACpBC,QAAS,IAAID,KAAK,yBAzCjBgB,OAAAqE,GAAA,EAAArE,CAAAsE,GA2CFd,GAAMS,GAAK,CACVhG,GAAIuF,GAAMS,GACVtG,UAAW6F,GAAMG,GACjBxF,MAAO,SACPoG,WAAW,EACXxF,UAAW,IAAIC,KAAK,uBACpBC,QAAS,IAAID,KAAK,yBAjDjBgB,OAAAqE,GAAA,EAAArE,CAAAsE,GAmDFd,GAAMU,GAAK,CACVjG,GAAIuF,GAAMU,GACVvG,UAAW6F,GAAMG,GACjBxF,MAAO,SACPoG,WAAW,EACXxF,UAAW,IAAIC,KAAK,uBACpBC,QAAS,IAAID,KAAK,yBAzDjBsF,IA4DLE,GAAI,CACFC,cAAejB,GAAMC,GACrBiB,WAAY,GACZC,eAAgBC,6ECjGLC,WCOE,SAAApH,GAA0B,IAAvB8G,EAAuB9G,EAAvB8G,UAAWO,EAAYrH,EAAZqH,MACvBC,EAAWC,KAAKC,MAAOV,EAAYO,EAAS,KAAO,GAEzD,OACE1G,EAAAC,EAAAC,cAAA4G,GAAA7G,EAAA,KACED,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,UACb+B,EADH,MACiBO,GAEjB1G,EAAAC,EAAAC,cAAA4G,GAAA7G,EAAMM,KAAN,KACEP,EAAAC,EAAAC,cAAA6G,GAAA9G,EAAA,CAAK+G,QAASL,EAAUM,SAAS,YAEnCjH,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,YAAauC,EAA7B,8BCZAO,GAAU,SAAA7H,GAAqB,IAAlBS,EAAkBT,EAAlBS,MAAOb,EAAWI,EAAXJ,KAClBkI,EAAKrG,WAASsG,WAAWnI,GAQ/B,OACEe,EAAAC,EAAAC,cAAA4G,GAAA7G,EAAA,CAAMmE,UAAWC,KAAOrF,WACtBgB,EAAAC,EAAAC,cAAA4G,GAAA7G,EAAMM,KAAN,KAAYT,GACZE,EAAAC,EAAAC,cAAA4G,GAAA7G,EAAMM,KAAN,CAAW6D,UAAWC,KAAOpF,MAC1BA,EAAOkI,EAAGE,eAXF,CACbC,QAAS,QACTC,MAAO,OACPC,IAAK,UACLC,KAAM,YAOkC,OAW5CP,GAAQzG,YAAc,UAEPyG,UC3BT3G,GAAOD,EAAAL,EAAKM,KCLHmH,GDOC,SAAArI,GAQV,IAPJQ,EAOIR,EAPJQ,GACAE,EAMIV,EANJU,MACA+E,EAKIzF,EALJyF,MACAxB,EAIIjE,EAJJiE,cACAqE,EAGItI,EAHJsI,UACAC,EAEIvI,EAFJuI,mBACAC,EACIxI,EADJwI,aAEA,OACE7H,EAAAC,EAAAC,cAAC4H,GAAD,CACEtH,MAAM,aACN0C,QAAS,WACPI,EAAczD,IAEhBuD,MAAO,CACL2E,WAAU,cAAAC,OAAgBlD,KAG3B/E,EATH,IASUC,EAAAC,EAAAC,cAAC+H,GAAD,CAASnI,MAAM,aAAab,KAAM4I,IAC1C7H,EAAAC,EAAAC,cAAC+H,GAAD,CAASnI,MAAM,kBACfE,EAAAC,EAAAC,cAACgI,GAAD,CAAU/B,UAAWyB,EAAoBlB,MAAOiB,MEpBhDQ,GAAkB,SAAC3E,EAAO3D,GAE9B,OADc+B,OAAOW,OAAOiB,EAAMG,OACrByE,OAAO,SAAAC,GAAC,OAAIA,EAAE9I,YAAcM,KAarCyI,GAAkB,SAAC9E,EAAO3D,GAC9B,IACM0I,EADeJ,GAAgB3E,EAAO3D,GAEzCuI,OAAO,SAAAC,GAAC,OAAKA,EAAElC,YACfqC,KAAK,SAACvI,EAAGwI,GAAJ,OAAUxI,EAAEU,UAAY8H,EAAE5H,UAElC,GAAI0H,EAAeG,OACjB,OAAOH,EAAe,GAAG5H,WAcd4C,eAVS,SAACC,EAAOC,GAAR,OAAA7B,OAAAS,EAAA,EAAAT,CAAA,GA9BL,SAAC4B,EAAO3D,GACzB,OAAO2D,EAAMlE,SAASO,GA8BnB8I,CAAWnF,EAAOC,EAAM5D,IAtBF,SAAC2D,EAAO3D,GACjC,IAAM+I,EAAeT,GAAgB3E,EAAO3D,GACtCgJ,EAAiBD,EAAaR,OAAO,SAAAC,GAAC,OAAIA,EAAElC,YAAWuC,OAE7D,MAAO,CACLf,UAAWiB,EAAaF,OACxBd,mBAAoBiB,GAiBnBC,CAAmBtF,EAAOC,EAAM5D,IAFb,CAGtBgI,aAAcS,GAAgB9E,EAAOC,EAAM5D,OAGlB,SAAA+D,GAAQ,MAAK,CACtCN,cAAe,SAAAzD,GAAE,OAAI+D,EAASN,EAAczD,OAG/B0D,CAGbmE,2CC1CIqB,GAASC,GAAA/I,EAAM8I,OAwBNE,GAtBI,SAAA5J,GAAqC,IAAlC6J,EAAkC7J,EAAlC6J,WAAY9E,EAAsB/E,EAAtB+E,UAAWpB,EAAW3D,EAAX2D,KAC3C,OACEhD,EAAAC,EAAAC,cAACiJ,GAAA,EAAD,CACE/E,UAAWA,EACXpB,KAAMA,EACNE,QAAS,kBACP6F,GAAO,cAAe,qBAAsB,CAC1C,CAAE5J,KAAM,UACR,CACEA,KAAM,SACNiK,QAAS,SAAAxJ,GAAK,OAAIsJ,EAAW,CAAEnJ,MAAOH,YCTnC2D,oBACb8F,EALyB,SAAAzF,GAAQ,MAAK,CACtCsF,WAAY,SAAA9I,GAAI,OAAIwD,EdNI,SAAAxD,GAAI,MAAK,CACjC2C,KAAM,cACN3C,QcI6B8I,CAAW9I,OAG3BmD,CAGb0F,yBCHIK,GAAc,SAAAjK,GAAkB,IAAfC,EAAeD,EAAfC,SAUrB,OACEU,EAAAC,EAAAC,cAAAI,EAAAL,EAAA,CAAMiC,aAVa,WACnB,OACElC,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAACqJ,GAAD,CAAYnF,UAAWC,KAAOnF,QAAS8D,KAAM,YAO9C1D,EAASI,IAAI,SAACC,EAAS6J,GAAV,OACZxJ,EAAAC,EAAAC,cAACuJ,GAAD,CAASC,IAAKF,EAAO3J,GAAIF,EAAQE,SAgBzCyJ,GAAY7I,YAAc,cAEX6I,ICvCAA,GDuCAA,GE3BA/F,eARS,SAAAC,GAAK,MAAK,CAChClE,SAAUsC,OAAOW,OAAOiB,EAAMlE,YAGL,SAAAsE,GAAQ,MAAK,CACtCN,cAAe,SAAAzD,GAAE,OAAI+D,EAASN,EAAczD,OAG/B0D,CAGb+F,yBCOaK,GAfO,SAAAtK,GAAiB,IAAd6D,EAAc7D,EAAd6D,QACvB,OACElD,EAAAC,EAAAC,cAAAI,EAAAL,EAAMM,KAAN,CACEqJ,MAAO5J,EAAAC,EAAAC,cAACiJ,GAAA,EAAD,CAAUnG,KAAM,OAAQI,MAAO,CAAE0B,MAAO,UAC/C5B,QAASA,GAETlD,EAAAC,EAAAC,cAAA,QAAMkE,UAAWC,KAAOlF,MAAxB,uGCTA0K,GAAQ,SAAAxK,GAAqB,IAAlByF,EAAkBzF,EAAlByF,MAAO3F,EAAWE,EAAXF,KACtB,OACEa,EAAAC,EAAAC,cAAA4J,GAAA7J,EAAA,CACEd,KAAMA,EACNiE,MAAO,CACLC,WAAY,GACZ0G,QAAS,QACTjF,MAAOA,EACPD,gBAAiB,cACjBmF,aAAc,EACdC,YAAa,QACbC,YAAa,MACbC,YAAarF,MAWrB+E,GAAMpJ,YAAc,QAELoJ,IC7BAA,GD6BAA,wBEpBTO,GAAS,SAAA/K,GAA8D,IAA3DU,EAA2DV,EAA3DU,MAAOJ,EAAoDN,EAApDM,QAASgB,EAA2CtB,EAA3CsB,UAAWE,EAAgCxB,EAAhCwB,QAASwJ,EAAuBhL,EAAvBgL,iBAC9CC,EAAQxJ,WAASsG,WAAWzG,GAC5B4J,EAAMzJ,WAASsG,WAAWvG,GAE1B5B,EAAOqL,EAAMjD,eAAe,CAAEE,MAAO,OAAQC,IAAK,YAClDgD,EAAOF,EAAMjD,eAAevG,WAAS2J,gBACrCC,EAAKH,EAAIlD,eAAevG,WAAS2J,gBAEvC,OACEzK,EAAAC,EAAAC,cAAA4G,GAAA7G,EAAA,KACED,EAAAC,EAAAC,cAAA4G,GAAA7G,EAAMM,KAAN,KACGR,EACAsK,GACCrK,EAAAC,EAAAC,cAACyK,GAAD,CAAOxL,KAAMQ,EAAQI,MAAO+E,MAAOnF,EAAQmF,SAG9CnE,GACCX,EAAAC,EAAAC,cAAA4G,GAAA7G,EAAMM,KAAN,CAAW6D,UAAWC,KAAOpF,MAC1BA,EADH,IACUuL,EADV,OACoBE,KAc5BN,GAAO3J,YAAc,SAEN2J,UCtCThJ,GAAO,SAAA/B,GAYP,IAXJQ,EAWIR,EAXJQ,GACAsG,EAUI9G,EAVJ8G,UACAxD,EASItD,EATJsD,MACAiI,EAQIvL,EARJuL,OACAC,EAOIxL,EAPJwL,SACA9K,EAMIV,EANJU,MACA+K,EAKIzL,EALJyL,qBACAT,EAIIhL,EAJJgL,iBACA1J,EAGItB,EAHJsB,UACAE,EAEIxB,EAFJwB,QACAlB,EACIN,EADJM,QACI8B,EAC8BC,oBAAS,GADvCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACGsJ,EADHpJ,EAAA,GACcqJ,EADdrJ,EAAA,GAiBJ,OACE3B,EAAAC,EAAAC,cAAA+K,GAAAhL,EAAA,CACEmD,MAAO,CAAEyB,gBAAiB,QAC1BqG,WAAS,EACTC,MAAO,CACL,CACEhM,KAAM,OACNiK,QAASwB,EACTxH,MAAO,CAAEyB,gBAAiB,OAAQC,MAAO,UAE3C,CACE3F,KAAM,SACNiK,QAASyB,EACTzH,MAAO,CAAEyB,gBAAiB,UAAWC,MAAO,YAIhD9E,EAAAC,EAAAC,cAAAI,EAAAL,EAAMM,KAAN,CACEC,MApB2BuK,EAAY,OAAS,KAqBhD7H,QA7BU,SAAAkI,GACQ,aAAlBA,EAAEC,OAAOtI,MACPJ,GACFqI,GAAcD,IA2BdnB,MAAO5J,EAAAC,EAAAC,cAAAoL,GAAArL,EAAA,CAAUiD,QAlCR,WACb4H,EAAqBjL,IAiCiB0L,eAAgBpF,KAElDnG,EAAAC,EAAAC,cAACsL,GAAD,CACEzL,MAAOA,EACPJ,QAASA,EACTgB,UAAWA,EACXE,QAASA,EACTwJ,iBAAkBA,KAElBU,GAAapI,GACb3C,EAAAC,EAAAC,cAAAI,EAAAL,EAAMM,KAAKkL,MAAX,KACG9I,EAAM+I,MAAM,MAAMhM,IAAI,SAACiM,EAAMjC,GAC5B,OACE1J,EAAAC,EAAAC,cAAC0L,EAAA,SAAD,CAAUlC,IAAKA,GACZiC,EACD3L,EAAAC,EAAAC,cAAA,kBAkBlBkB,GAAKX,YAAc,OAEJW,ICzFAA,GDyFAA,GE5EAmC,eATS,SAACC,EAAOC,GAAR,OAAA7B,OAAAS,EAAA,EAAAT,CAAA,GACnB6B,EADmB,CAEtB9D,QAAS6D,EAAMlE,SAASmE,EAAMlE,cAGL,SAAAqE,GAAQ,MAAK,CACtCkH,qBAAsB,SAAAjL,GAAE,OAAI+D,ExBwBM,SAAA/D,GAAE,MAAK,CACzCkD,KAAM,yBACNlD,MwB1BqCiL,CAAqBjL,OAG7C0D,CAGbnC,gECXIyK,GAAa,SAAAxM,GAAsD,IAAAyM,EAAnD1D,EAAmD/I,EAAnD+I,OAAQ2D,EAA2C1M,EAA3C0M,UAAWC,EAAgC3M,EAAhC2M,WAAYC,EAAoB5M,EAApB4M,cAC7CC,GAAOJ,EAAA,GAAAlK,OAAAqE,GAAA,EAAArE,CAAAkK,EACV7G,GAAmB,QADTrD,OAAAqE,GAAA,EAAArE,CAAAkK,EAEV7G,GAAyB,QAFf6G,GAKPK,EAAcvK,OAAOW,OAAO2J,GAC5BE,EAAcxK,OAAOyK,KAAKH,GAASI,QAAQN,GAOjD,OACEhM,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsM,SAAA,KACEvM,EAAAC,EAAAC,cAAAsM,GAAAvM,EAAA,CACEL,MAAOwI,EACPhG,YAAY,SACZqK,UAAW,EACXC,WAAY,SACZlN,SAAUuM,IAEZ/L,EAAAC,EAAAC,cAAAyM,GAAA1M,EAAA,KACED,EAAAC,EAAAC,cAAA0M,EAAA3M,EAAA,CACEsC,OAAQ4J,EACRU,cAjBe,SAAAC,GACrB,IAAMC,EAASnL,OAAOyK,KAAKH,GAASc,KAAK,SAAAtD,GAAG,OAAIwC,EAAQxC,KAASoD,IACjEb,EAAcc,IAgBRE,cAAeb,OAczBP,GAAWpL,YAAc,aAEVoL,IChDAA,GDgDAA,GElCAtI,eAVS,SAAAC,GAAK,MAAK,CAChC4E,OAAQ5E,EAAM4C,GAAGE,WACjB0F,WAAYxI,EAAM4C,GAAGG,iBAGI,SAAA3C,GAAQ,MAAK,CACtCmI,UAAW,SAAAmB,GAAM,OAAItJ,E3BSM,SAAAsJ,GAAM,MAAK,CACtCnK,KAAM,kBACNmK,U2BX8BC,CAAcD,KAC5CjB,cAAe,SAAAc,GAAM,OAAInJ,E3BaM,SAAAmJ,GAAM,MAAK,CAC1ChK,KAAM,uBACNgK,U2BfkCK,CAAkBL,OAGvCxJ,CAGbsI,ICTIwB,GAAW,SAAAhO,GAA6D,IAA1DgC,EAA0DhC,EAA1DgC,QAAS9B,EAAiDF,EAAjDE,UAAW+N,EAAsCjO,EAAtCiO,aAAc3J,EAAwBtE,EAAxBsE,MAAO4J,EAAiBlO,EAAjBkO,WAAiB9L,EACjCC,oBAAS,GADwBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrE+L,EADqE7L,EAAA,GACtD8L,EADsD9L,EAAA,GAAA+L,EAExChM,mBAAS,MAF+BiM,EAAA/L,OAAAC,EAAA,EAAAD,CAAA8L,EAAA,GAErEE,EAFqED,EAAA,GAEzDE,EAFyDF,EAAA,GAoB5E,OAAIH,EAdAxN,EAAAC,EAAAC,cAACoE,EAAD,CACE/C,KAAMqM,EACNrO,UAAWA,EACX8B,QAASA,EACTG,QAAS,kBAAMiM,GAAkB,MAerCzN,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsM,SAAA,KACEvM,EAAAC,EAAAC,cAAC4N,GAAD,MACA9N,EAAAC,EAAAC,cAAAI,EAAAL,EAAA,CAAMiC,aAAc,kBAAMoL,IACvB3J,EAAMjE,IAAI,SAAA6B,GAAI,OACbvB,EAAAC,EAAAC,cAAC6N,GAADnM,OAAAoM,OAAA,CACEtE,IAAKnI,EAAK1B,GACV+K,OAAQ,kBAhBH,SAAArJ,GACbsM,EAActM,GACdkM,GAAkB,GAcI7C,CAAOrJ,IACrBsJ,SAAU,kBAAM0C,EAAWhM,EAAK1B,KAChCwK,kBAAmB9K,GACfgC,MAGRvB,EAAAC,EAAAC,cAAC+N,GAAD,CAAe/K,QAAS,kBAAMuK,GAAkB,SAgBxDJ,GAASa,aAAe,GAExBb,GAAS5M,YAAc,WAER4M,UCjEAA,GDiEAA,GE5DTc,GAAkB,SAAA3K,GAEtB,OADyBA,EAAjBlE,SAAiBkE,EAAP4C,GACCC,eAAetG,OAW9BqO,IAAOC,GAAA,GAAAzM,OAAAqE,GAAA,EAAArE,CAAAyM,GACVpJ,GAPiB,SAAChF,EAAGwI,GACtB,IAAM6F,EAAQrO,EAAEF,MAAMwO,cAChBC,EAAQ/F,EAAE1I,MAAMwO,cACtB,OAAOD,EAAQE,GAAS,EAAIF,EAAQE,EAAQ,EAAI,IAGrC5M,OAAAqE,GAAA,EAAArE,CAAAyM,GAEVpJ,GAVqB,SAAChF,EAAGwI,GAAJ,OAAUxI,EAAEU,UAAY8H,EAAE5H,UAQrCwN,IAKPI,GAAkB,SAAAjL,GAAS,IAAAkL,EACuBlL,EAAM4C,GAApDC,EADuBqI,EACvBrI,cAAeC,EADQoI,EACRpI,WAAYC,EADJmI,EACInI,eAEnC,OAAO3E,OAAOW,OAAOiB,EAAMG,OACxByE,OAAO,SAAAC,GACN,OAAI/B,GAAc+B,EAAEtI,MACXsI,EAAE9I,YAAc8G,GAAiBgC,EAAEtI,MAAM4O,SAASrI,GAEpD+B,EAAE9I,YAAc8G,IAExBmC,KAAK4F,GAAQ7H,KAcHhD,eAXS,SAAAC,GAAK,MAAK,CAChC8J,aAAca,GAAgB3K,GAC9BjE,UAAWiE,EAAM4C,GAAGC,cACpB1C,MAAO8K,GAAgBjL,KAGE,SAAAI,GAAQ,MAAK,CACtCvC,QAAS,SAAAjB,GAAI,OAAIwD,EAASvC,EAAQjB,KAClCmN,WAAY,SAAAnN,GAAI,OAAIwD,E9B9BW,CAC/Bb,KAAM,cACNlD,G8B4BwCO,OAG3BmD,CAGb8J,ICrCIe,IAAOQ,GAAA,GAAAhN,OAAAqE,GAAA,EAAArE,CAAAgN,GACV3J,GAPiB,SAAChF,EAAGwI,GACtB,IAAM6F,EAAQrO,EAAEF,MAAMwO,cAChBC,EAAQ/F,EAAE1I,MAAMwO,cACtB,OAAOD,EAAQE,GAAS,EAAIF,EAAQE,EAAQ,EAAI,IAGrC5M,OAAAqE,GAAA,EAAArE,CAAAgN,GAEV3J,GAVqB,SAAChF,EAAGwI,GAAJ,OAAUxI,EAAEU,UAAY8H,EAAE5H,UAQrC+N,IAKPH,GAAkB,SAAAjL,GAAS,IAAAkL,EACQlL,EAAM4C,GAArCE,EADuBoI,EACvBpI,WAAYC,EADWmI,EACXnI,eAEpB,OAAO3E,OAAOW,OAAOiB,EAAMG,OACxByE,OAAO,SAAAC,GACN,OAAOA,EAAEtI,MAAM4O,SAASrI,KAEzBkC,KAAK4F,GAAQ7H,KAWHhD,eARS,SAAAC,GAAK,MAAK,CAChCG,MAAO8K,GAAgBjL,KAGE,SAAAI,GAAQ,MAAK,CACtCvC,QAAS,SAAAjB,GAAI,OAAIwD,EAASvC,EAAQjB,OAGrBmD,CAGb8J,ICvBIwB,GAAgB,WA0EPC,eArEb,SAAAA,EAAYrL,GAAO,IAAAsL,EAAA,OAAAnN,OAAAoN,EAAA,EAAApN,CAAAqN,KAAAH,IACjBC,EAAAnN,OAAAsN,EAAA,EAAAtN,CAAAqN,KAAArN,OAAAuN,EAAA,EAAAvN,CAAAkN,GAAAM,KAAAH,KAAMxL,KAIRD,MALmB5B,OAAAS,EAAA,EAAAT,CAAA,GAMdmE,GANc,CAOjBsJ,QAAQ,EACRC,WAAYT,KARKE,EAWnBQ,aAAe,SAAA3K,GACbmK,EAAKS,SAAS,CACZF,WAAY1K,EAAM6K,YAAY7P,SAXhCmP,EAAKW,iBAAmBX,EAAKW,iBAAiBC,KAAtB/N,OAAAgO,EAAA,EAAAhO,CAAAmN,IAFPA,gFAiBFvF,GACfyF,KAAKO,SAAL5N,OAAAS,EAAA,EAAAT,CAAA,GACKqN,KAAKzL,MADV,CAEE4C,GAAGxE,OAAAS,EAAA,EAAAT,CAAA,GACEqN,KAAKzL,MAAM4C,GADd,CAEAC,cAAemD,wCAKZ,IACC8F,EAAeL,KAAKzL,MAApB8L,WACFO,EAAaP,IAAeT,GAC5BiB,EAlCY,aAkCKR,EACjBS,EAlCS,UAkCQT,EAEjBU,EAAQ,CArCI,WAqCYnB,GApCf,SAsCf,OACE7O,EAAAC,EAAAC,cAAC+P,EAAAhQ,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,aACbyL,GACC7P,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsM,SAAA,KACEvM,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,eACdpE,EAAAC,EAAAC,cAACgQ,GAAD,CAAaR,iBAAkBT,KAAKS,oBAEtC1P,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,gBACdpE,EAAAC,EAAAC,cAACiQ,GAAD,QAILL,GAAkB9P,EAAAC,EAAAC,cAACkQ,GAAD,MAClBL,GACC/P,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,YACdpE,EAAAC,EAAAC,cAACmQ,GAAD,QAKNrQ,EAAAC,EAAAC,cAAAoQ,EAAArQ,EAAA,CAAQsQ,KAAM,SACZvQ,EAAAC,EAAAC,cAAA0M,EAAA3M,EAAA,CACEsC,OAAQyN,EACRxQ,SAAUyP,KAAKM,aACfnL,UAAW,aACX6I,cAAe+C,EAAM1D,QAAQgD,cA9DvBkB,IAAMC,WCTJzO,QACW,cAA7B0O,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAAMC,GAAiB,WACrB,IAAMC,EAAInK,KAAKoK,MAAsB,IAAhBpK,KAAKqK,UACxBC,EAAI,GAAKtK,KAAKoK,MAAsB,GAAhBpK,KAAKqK,UAAiB,IAC1CE,EAAIvK,KAAKoK,MAAsB,GAAhBpK,KAAKqK,UAAiB,IACvC,aAAAjJ,OAAc+I,EAAd,KAAA/I,OAAmBkJ,EAAnB,KAAAlJ,OAAwBmJ,EAAxB,MCFIjM,GAAOC,EAAQ,IAmBN7F,GAjBE,WAAwB,IAAvBkE,EAAuB4N,UAAA1I,OAAA,QAAAW,IAAA+H,UAAA,GAAAA,UAAA,GAAf,GAAIC,EAAWD,UAAA1I,OAAA,EAAA0I,UAAA,QAAA/H,EACjCiI,EAAUpM,KAChB,OAAQmM,EAAOtO,MACb,IAAK,cACH,OAAOnB,OAAAS,EAAA,EAAAT,CAAA,GACF4B,EADL5B,OAAAqE,GAAA,EAAArE,CAAA,GAEG0P,EAFH1P,OAAAS,EAAA,EAAAT,CAAA,CAGI/B,GAAIyR,EACJxM,MAAOgM,MACJO,EAAOjR,QAGhB,QACE,OAAOoD,ICjBP0B,GAAOC,EAAQ,IAsCNiB,GApCJ,WAAwB,IAAvB5C,EAAuB4N,UAAA1I,OAAA,QAAAW,IAAA+H,UAAA,GAAAA,UAAA,GAAf,GAAIC,EAAWD,UAAA1I,OAAA,EAAA0I,UAAA,QAAA/H,EACjC,OAAQgI,EAAOtO,MACb,IAAK,yBACH,IAAMlD,EAAKwR,EAAOxR,GAClB,OAAO+B,OAAAS,EAAA,EAAAT,CAAA,GACF4B,EADL5B,OAAAqE,GAAA,EAAArE,CAAA,GAEG/B,EAFH+B,OAAAS,EAAA,EAAAT,CAAA,GAGO4B,EAAM3D,GAHb,CAIIsG,WAAY3C,EAAM3D,GAAIsG,cAG5B,IAAK,WACH,IAAMmL,EAAUpM,KAChB,OAAOtD,OAAAS,EAAA,EAAAT,CAAA,GACF4B,EADL5B,OAAAqE,GAAA,EAAArE,CAAA,GAEG0P,EAFH1P,OAAAS,EAAA,EAAAT,CAAA,CAGI/B,GAAIyR,GACDD,EAAOjR,QAGhB,IAAK,cACH,OAAOwB,OAAAS,EAAA,EAAAT,CAAA,GACF4B,EADL5B,OAAAqE,GAAA,EAAArE,CAAA,GAEGyP,EAAOjR,KAAKP,GAFf+B,OAAAS,EAAA,EAAAT,CAAA,GAGOyP,EAAOjR,QAGhB,IAAK,cACH,IAAMmR,EAAQ3P,OAAAS,EAAA,EAAAT,CAAA,GAAQ4B,GAEtB,cADO+N,EAASF,EAAOxR,IAChB0R,EACT,QACE,OAAO/N,ICZE4C,GAtBJ,WAAwB,IAAvB5C,EAAuB4N,UAAA1I,OAAA,QAAAW,IAAA+H,UAAA,GAAAA,UAAA,GAAf,GAAIC,EAAWD,UAAA1I,OAAA,EAAA0I,UAAA,QAAA/H,EACjC,OAAQgI,EAAOtO,MACb,IAAK,iBACH,OAAOnB,OAAAS,EAAA,EAAAT,CAAA,GACF4B,EADL,CAEE6C,cAAegL,EAAOxR,KAE1B,IAAK,uBACH,OAAO+B,OAAAS,EAAA,EAAAT,CAAA,GACF4B,EADL,CAEE+C,eAAgB8K,EAAOtE,SAE3B,IAAK,kBACH,OAAOnL,OAAAS,EAAA,EAAAT,CAAA,GACF4B,EADL,CAEE8C,WAAY+K,EAAOnE,SAEvB,QACE,OAAO1J,ICbEgO,eAAgB,CAC7BlS,YACAqE,SACAyC,QCOIqL,GAAQC,YACZC,GACA5L,GACA2K,OAAOkB,8BAAgClB,OAAOkB,gCAGhDC,IAASC,OACP9R,EAAAC,EAAAC,cAAC6R,EAAA,EAAD,CAAUN,MAAOA,IACfzR,EAAAC,EAAAC,cAAA8R,EAAA/R,EAAA,CAAgBgS,OAAQC,KACtBlS,EAAAC,EAAAC,cAACiS,GAAD,QAGJC,SAASC,eAAe,SNsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ec091b0a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DateRow_container__2tLJm\",\"date\":\"DateRow_date__2rS8p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Calendar_container__3830a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addIcon\":\"ProjectList_addIcon__3UC_Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"AddTaskButton_text__19sAl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"date\":\"Header_date__1Ebbq\"};","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { List, Picker } from 'antd-mobile'\n\nconst ProjectPicker = ({ projects, projectId, onChange }) => {\n  const projectLabels = projects.map(project => {\n    return { value: project.id, label: project.title }\n  })\n\n  return (\n    <Picker\n      data={projectLabels}\n      cols={1}\n      onChange={onChange}\n      value={[projectId]}\n    >\n      <List.Item arrow=\"horizontal\">Project</List.Item>\n    </Picker>\n  )\n}\n\nProjectPicker.propTypes = {\n  projects: PropTypes.array,\n  projectId: PropTypes.string,\n  onChange: PropTypes.func\n}\n\nProjectPicker.displayName = 'ProjectPicker'\n\nexport default ProjectPicker\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { DateTime } from 'luxon'\nimport {\n  List,\n  InputItem,\n  Button,\n  DatePicker,\n  Picker,\n  TextareaItem\n} from 'antd-mobile'\n\nimport ProjectPicker from './ProjectPicker'\n\nconst Item = List.Item\n\nconst REPEAT_MODE_NONE = 0\nconst REPEAT_MODE_DAILY = 1\nconst REPEAT_MODE_WEEKLY = 2\nconst REPEAT_MODE_MONTHLY = 3\n\nconst defaultData = {\n  startTime: new Date(),\n  endTime: DateTime.local()\n    .set({ hour: 1, minute: 0 })\n    .toJSDate()\n}\n\nconst Task = ({ addTask, updateTask, projects, projectId, task, onClose }) => {\n  const [data, setData] = useState(task || defaultData)\n  const isEdit = Boolean(task)\n\n  const repeatModes = [\n    {\n      label: 'None',\n      value: REPEAT_MODE_NONE\n    },\n    {\n      label: 'Daily',\n      value: REPEAT_MODE_DAILY\n    },\n    {\n      label: 'Weekly',\n      value: REPEAT_MODE_WEEKLY\n    },\n    {\n      label: 'Monthly',\n      value: REPEAT_MODE_MONTHLY\n    }\n  ]\n\n  const setStart = startTime => setData({ ...data, startTime })\n  const setEndTime = endTime => {\n    return setData({ ...data, endTime })\n  }\n  const setTitle = title => setData({ ...data, title })\n  const setNotes = notes => setData({ ...data, notes })\n  const setProjectId = id => setData({ ...data, projectId: id })\n\n  const handleSave = () => {\n    const newData = {\n      ...data,\n      projectId: data.projectId || projectId\n    }\n\n    isEdit ? updateTask(newData) : addTask(newData)\n    onClose()\n  }\n\n  const renderHeader = () => {\n    return isEdit ? 'Edit' : 'New Task'\n  }\n\n  return (\n    <List renderHeader={renderHeader}>\n      <InputItem value={data.title} placeholder=\"Title\" onChange={setTitle} />\n      <ProjectPicker\n        projects={projects}\n        projectId={data.projectId || projectId}\n        onChange={values => setProjectId(values[0])}\n      />\n      <DatePicker value={data.startTime} onChange={setStart}>\n        <List.Item arrow=\"horizontal\">Start</List.Item>\n      </DatePicker>\n      <DatePicker value={data.endTime} onChange={setEndTime}>\n        <List.Item arrow=\"horizontal\">End</List.Item>\n      </DatePicker>\n      <Picker data={repeatModes} cols={1} minuteStep={5}>\n        <List.Item arrow=\"horizontal\">Repeat</List.Item>\n      </Picker>\n      <TextareaItem\n        value={data.notes}\n        onChange={setNotes}\n        rows={3}\n        placeholder=\"Notes\"\n        autoHeight\n      />\n      <Item>\n        <Button type=\"primary\" size=\"small\" inline onClick={handleSave}>\n          Save\n        </Button>\n        <Button\n          onClick={() => {\n            onClose()\n          }}\n          size=\"small\"\n          inline\n          style={{ marginLeft: '2.5px' }}\n        >\n          Cancel\n        </Button>\n      </Item>\n    </List>\n  )\n}\n\nTask.propTypes = {\n  projectId: PropTypes.string,\n  addTask: PropTypes.func,\n  onClose: PropTypes.func,\n  task: PropTypes.object\n}\n\nTask.displayName = 'Task'\n\nexport default Task\n","export const addProject = data => ({\n  type: 'ADD_PROJECT',\n  data\n})\n\nexport const addTask = data => ({\n  type: 'ADD_TASK',\n  data\n})\n\nexport const updateTask = data => ({\n  type: 'UPDATE_TASK',\n  data\n})\n\nexport const removeTask = id => ({\n  type: 'REMOVE_TASK',\n  id\n})\n\nexport const setTaskFilter = search => ({\n  type: 'SET_TASK_FILTER',\n  search\n})\n\nexport const setTaskSortOption = option => ({\n  type: 'SET_TASK_SORT_OPTION',\n  option\n})\n\nexport const selectProject = id => ({\n  type: 'SELECT_PROJECT',\n  id\n})\n\nexport const toggleTaskCompletion = id => ({\n  type: 'TOGGLE_TASK_COMPLETION',\n  id\n})\n","import { connect } from 'react-redux'\n\nimport Task from '../../components/Forms/Task'\nimport { updateTask } from '../../actions'\n\nconst mapStateToProps = (state, props) => ({\n  events: Object.values(state.tasks),\n  projects: Object.values(state.projects),\n  ...props\n})\n\nconst mapDispatchToProps = dispatch => ({\n  updateTask: data => dispatch(updateTask(data))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Task)\n","import React, { useState } from 'react'\nimport moment from 'moment'\nimport { Calendar as C, momentLocalizer } from 'react-big-calendar'\n\nimport TaskForm from '../../containers/Forms/Task'\n\nimport styles from './Calendar.module.css'\n\nconst localizer = momentLocalizer(moment)\n\nconst Calendar = ({ events, projects }) => {\n  const [activeTask, setActiveTask] = useState(null)\n  const editActive = Boolean(activeTask)\n\n  const onSelectEvent = task => {\n    setActiveTask(task)\n  }\n\n  const closeForm = () => setActiveTask(null)\n\n  return (\n    <div className={styles.container}>\n      {editActive && (\n        <TaskForm task={activeTask} onClose={closeForm} onSave={() => {}} />\n      )}\n      {!editActive && (\n        <C\n          events={events}\n          localizer={localizer}\n          startAccessor=\"startTime\"\n          endAccessor=\"endTime\"\n          eventPropGetter={event => ({\n            style: {\n              backgroundColor: projects[event.projectId].color,\n              border: '1px solid rgba(0,0,0, 0.15)'\n            }\n          })}\n          onSelectEvent={onSelectEvent}\n        />\n      )}\n    </div>\n  )\n}\n\nCalendar.propTypes = {}\n\nCalendar.displayName = 'Calendar'\n\nexport default Calendar\n","import Calendar from './Calendar'\nexport default Calendar\n","import { connect } from 'react-redux'\n\nimport Calendar from '../components/Calendar'\n\nconst mapStateToProps = state => ({\n  events: Object.values(state.tasks),\n  projects: state.projects\n})\n\nexport default connect(mapStateToProps)(Calendar)\n","export const NAME = 'NAME'\nexport const START_DATE = 'START_DATE'\n\nexport default {\n  NAME,\n  START_DATE\n}\n","import taskSortOptions from '../components/TaskFilter/sortOptions'\n\nconst uuid = require('uuid/v1')\n\nconst uuids = {\n  p1: uuid(),\n  p2: uuid(),\n  p3: uuid(),\n  t1: uuid(),\n  t2: uuid(),\n  t3: uuid(),\n  t4: uuid(),\n  t5: uuid(),\n  t6: uuid(),\n  t7: uuid()\n}\n\nconst initialState = {\n  projects: {\n    [uuids.p1]: {\n      id: uuids.p1,\n      title: 'Project 1',\n      color: '#4379d5'\n    },\n    [uuids.p2]: {\n      id: uuids.p2,\n      title: 'Project 2',\n      color: '#41a959'\n    },\n    [uuids.p3]: {\n      id: uuids.p3,\n      title: 'Project 3',\n      color: '#be5f5f'\n    }\n  },\n  tasks: {\n    [uuids.t1]: {\n      id: uuids.t1,\n      projectId: uuids.p1,\n      title: 'Task 4',\n      completed: true,\n      startTime: new Date('2019-08-05T03:24:00'),\n      endTime: new Date('2019-08-05T04:24:00'),\n      notes: 'Line 1\\nLine2'\n    },\n    [uuids.t2]: {\n      id: uuids.t2,\n      projectId: uuids.p1,\n      title: 'Task 3',\n      completed: false,\n      startTime: new Date('2019-08-06T03:10:00'),\n      endTime: new Date('2019-08-06T04:20:00')\n    },\n    [uuids.t3]: {\n      id: uuids.t3,\n      projectId: uuids.p1,\n      title: 'Task 2',\n      completed: true,\n      startTime: new Date('2019-08-07T01:54:00'),\n      endTime: new Date('2019-08-07T02:34:00')\n    },\n    [uuids.t4]: {\n      id: uuids.t4,\n      projectId: uuids.p2,\n      title: 'Task 1',\n      completed: true,\n      startTime: new Date('2019-08-05T03:24:00'),\n      endTime: new Date('2019-08-05T05:24:00')\n    },\n\n    [uuids.t5]: {\n      id: uuids.t5,\n      projectId: uuids.p3,\n      title: 'Task 7',\n      completed: false,\n      startTime: new Date('2019-08-07T03:24:00'),\n      endTime: new Date('2019-08-07T04:24:00')\n    },\n    [uuids.t6]: {\n      id: uuids.t6,\n      projectId: uuids.p3,\n      title: 'Task 6',\n      completed: false,\n      startTime: new Date('2019-08-08T06:20:00'),\n      endTime: new Date('2019-08-08T08:20:00')\n    },\n    [uuids.t7]: {\n      id: uuids.t7,\n      projectId: uuids.p3,\n      title: 'Task 5',\n      completed: false,\n      startTime: new Date('2019-08-09T01:20:00'),\n      endTime: new Date('2019-08-09T05:20:00')\n    }\n  },\n  ui: {\n    activeProject: uuids.p1,\n    taskFilter: '',\n    taskSortOption: taskSortOptions.NAME\n  }\n}\n\nexport default initialState\n","import Progress from './Progress'\nexport default Progress\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Progress as Bar } from 'antd-mobile'\nimport { Flex } from 'antd-mobile'\n\nimport './style.css'\n\nconst Progress = ({ completed, total }) => {\n  const progress = Math.round((completed / total) * 100 || 0)\n\n  return (\n    <Flex>\n      <div className={'number'}>\n        {completed} / {total}\n      </div>\n      <Flex.Item>\n        <Bar percent={progress} position=\"normal\" />\n      </Flex.Item>\n      <div className={'percents'}>{progress} %</div>\n    </Flex>\n  )\n}\n\nProgress.propTypes = {\n  completed: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n}\n\nexport default Progress\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Flex } from 'antd-mobile'\nimport { DateTime } from 'luxon'\n\nimport styles from './DateRow.module.css'\n\nconst DateRow = ({ label, date }) => {\n  const dt = DateTime.fromJSDate(date)\n  const format = {\n    weekday: 'short',\n    month: 'long',\n    day: '2-digit',\n    year: 'numeric'\n  }\n\n  return (\n    <Flex className={styles.container}>\n      <Flex.Item>{label}</Flex.Item>\n      <Flex.Item className={styles.date}>\n        {date ? dt.toLocaleString(format) : '-'}\n      </Flex.Item>\n    </Flex>\n  )\n}\n\nDateRow.propTypes = {\n  label: PropTypes.node.isRequired,\n  date: PropTypes.object\n}\n\nDateRow.displayName = 'DateRow'\n\nexport default DateRow\n","import React from 'react'\nimport { List } from 'antd-mobile'\n\nimport Progress from '../Progress'\nimport DateRow from './DateRow'\n\nconst Item = List.Item\n\nconst Project = ({\n  id,\n  title,\n  color,\n  selectProject,\n  taskCount,\n  completedTaskCount,\n  nextTaskTime\n}) => {\n  return (\n    <Item\n      arrow=\"horizontal\"\n      onClick={() => {\n        selectProject(id)\n      }}\n      style={{\n        borderLeft: `12px solid ${color}`\n      }}\n    >\n      {title} <DateRow label=\"Next task:\" date={nextTaskTime} />\n      <DateRow label=\"Project ends:\" />\n      <Progress completed={completedTaskCount} total={taskCount} />\n    </Item>\n  )\n}\n\nProject.propTypes = {}\n\nexport default Project\n","import Project from './Project'\nexport default Project\n","import { connect } from 'react-redux'\n\nimport Project from '../components/Project'\nimport { selectProject } from '../actions'\n\nconst getProject = (state, id) => {\n  return state.projects[id]\n}\n\nconst getProjectTasks = (state, id) => {\n  const tasks = Object.values(state.tasks)\n  return tasks.filter(t => t.projectId === id)\n}\n\nconst getProgressDetails = (state, id) => {\n  const projectTasks = getProjectTasks(state, id)\n  const completedTasks = projectTasks.filter(t => t.completed).length\n\n  return {\n    taskCount: projectTasks.length,\n    completedTaskCount: completedTasks\n  }\n}\n\nconst getNextTaskTime = (state, id) => {\n  const projectTasks = getProjectTasks(state, id)\n  const incompletTasks = projectTasks\n    .filter(t => !t.completed)\n    .sort((a, b) => a.startTime - b.endTime)\n\n  if (incompletTasks.length) {\n    return incompletTasks[0].startTime\n  }\n}\n\nconst mapStateToProps = (state, props) => ({\n  ...getProject(state, props.id),\n  ...getProgressDetails(state, props.id),\n  nextTaskTime: getNextTaskTime(state, props.id)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  selectProject: id => dispatch(selectProject(id))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Project)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Modal } from 'antd-mobile'\n\nimport { IoIosAdd } from 'react-icons/io'\n\nconst prompt = Modal.prompt\n\nconst NewProject = ({ addProject, className, size }) => {\n  return (\n    <IoIosAdd\n      className={className}\n      size={size}\n      onClick={() =>\n        prompt('New project', 'Enter project name', [\n          { text: 'Cancel' },\n          {\n            text: 'Submit',\n            onPress: value => addProject({ title: value })\n          }\n        ])\n      }\n    />\n  )\n}\n\nNewProject.propTypes = {\n  addProject: PropTypes.func.isRequired\n}\n\nexport default NewProject\n","import { connect } from 'react-redux'\n\nimport NewProject from '../../components/Buttons/NewProject'\nimport { addProject } from '../../actions'\n\nconst mapDispatchToProps = dispatch => ({\n  addProject: data => dispatch(addProject(data))\n})\n\nexport default connect(\n  undefined,\n  mapDispatchToProps\n)(NewProject)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { List } from 'antd-mobile'\n\nimport Project from '../../containers/Project'\nimport NewProject from '../../containers/Buttons/NewProject'\n\nimport styles from './ProjectList.module.css'\n\nconst ProjectList = ({ projects }) => {\n  const renderHeader = () => {\n    return (\n      <div>\n        Projects\n        <NewProject className={styles.addIcon} size={'21px'} />\n      </div>\n    )\n  }\n\n  return (\n    <List renderHeader={renderHeader}>\n      {projects.map((project, index) => (\n        <Project key={index} id={project.id} />\n      ))}\n    </List>\n  )\n}\n\nProjectList.propTypes = {\n  projects: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      tasks: PropTypes.array\n    })\n  ),\n  setActiveProject: PropTypes.func\n}\n\nProjectList.displayName = 'ProjectList'\n\nexport default ProjectList\n","import ProjectList from './ProjectList'\nexport default ProjectList\n","import { connect } from 'react-redux'\n\nimport ProjectList from '../components/ProjectList'\nimport { selectProject } from '../actions'\n\nconst mapStateToProps = state => ({\n  projects: Object.values(state.projects)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  selectProject: id => dispatch(selectProject(id))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProjectList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { List } from 'antd-mobile'\n\nimport { IoIosAdd } from 'react-icons/io'\n\nimport styles from './AddTaskButton.module.css'\n\nconst AddTaskButton = ({ onClick }) => {\n  return (\n    <List.Item\n      thumb={<IoIosAdd size={'21px'} style={{ color: '#666' }} />}\n      onClick={onClick}\n    >\n      <span className={styles.text}>Add new</span>\n    </List.Item>\n  )\n}\n\nAddTaskButton.propTypes = {\n  onClick: PropTypes.func\n}\n\nexport default AddTaskButton\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Badge as AmBadge } from 'antd-mobile'\n\nconst Badge = ({ color, text }) => {\n  return (\n    <AmBadge\n      text={text}\n      style={{\n        marginLeft: 12,\n        padding: '0 3px',\n        color: color,\n        backgroundColor: 'transparent',\n        borderRadius: 2,\n        borderStyle: 'solid',\n        borderWidth: '1px',\n        borderColor: color\n      }}\n    />\n  )\n}\n\nBadge.propTypes = {\n  color: PropTypes.string,\n  text: PropTypes.string\n}\n\nBadge.displayName = 'Badge'\n\nexport default Badge\n","import Badge from './Badge'\nexport default Badge\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Flex } from 'antd-mobile'\nimport { DateTime } from 'luxon'\n\nimport Badge from './Badge'\n\nimport styles from './Header.module.css'\n\nconst Header = ({ title, project, startTime, endTime, showProjectTitle }) => {\n  const start = DateTime.fromJSDate(startTime)\n  const end = DateTime.fromJSDate(endTime)\n\n  const date = start.toLocaleString({ month: 'long', day: '2-digit' })\n  const from = start.toLocaleString(DateTime.TIME_24_SIMPLE)\n  const to = end.toLocaleString(DateTime.TIME_24_SIMPLE)\n\n  return (\n    <Flex>\n      <Flex.Item>\n        {title}\n        {showProjectTitle && (\n          <Badge text={project.title} color={project.color} />\n        )}\n      </Flex.Item>\n      {startTime && (\n        <Flex.Item className={styles.date}>\n          {date} {from} to {to}\n        </Flex.Item>\n      )}\n    </Flex>\n  )\n}\n\nHeader.propTypes = {\n  title: PropTypes.node.isRequired,\n  startTime: PropTypes.object,\n  endTime: PropTypes.object,\n  project: PropTypes.object\n}\n\nHeader.displayName = 'Header'\n\nexport default Header\n","import React, { useState, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { Checkbox, List, SwipeAction } from 'antd-mobile'\n\nimport Header from './Header'\n\nconst Task = ({\n  id,\n  completed,\n  notes,\n  onEdit,\n  onDelete,\n  title,\n  toggleTaskCompletion,\n  showProjectTitle,\n  startTime,\n  endTime,\n  project\n}) => {\n  const [collapsed, setCollapsed] = useState(true)\n\n  const toggle = () => {\n    toggleTaskCompletion(id)\n  }\n\n  const onClick = e => {\n    if (e.target.type !== 'checkbox') {\n      if (notes) {\n        setCollapsed(!collapsed)\n      }\n    }\n  }\n\n  const getArrowDirection = () => (collapsed ? 'down' : 'up')\n\n  return (\n    <SwipeAction\n      style={{ backgroundColor: 'gray' }}\n      autoClose\n      right={[\n        {\n          text: 'Edit',\n          onPress: onEdit,\n          style: { backgroundColor: '#ddd', color: 'white' }\n        },\n        {\n          text: 'Delete',\n          onPress: onDelete,\n          style: { backgroundColor: '#F4333C', color: 'white' }\n        }\n      ]}\n    >\n      <List.Item\n        arrow={getArrowDirection()}\n        onClick={onClick}\n        thumb={<Checkbox onClick={toggle} defaultChecked={completed} />}\n      >\n        <Header\n          title={title}\n          project={project}\n          startTime={startTime}\n          endTime={endTime}\n          showProjectTitle={showProjectTitle}\n        />\n        {!collapsed && notes && (\n          <List.Item.Brief>\n            {notes.split('\\n').map((item, key) => {\n              return (\n                <Fragment key={key}>\n                  {item}\n                  <br />\n                </Fragment>\n              )\n            })}\n          </List.Item.Brief>\n        )}\n      </List.Item>\n    </SwipeAction>\n  )\n}\n\nTask.propTypes = {\n  title: PropTypes.string,\n  completed: PropTypes.bool,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func\n}\n\nTask.displayName = 'Task'\n\nexport default Task\n","import Task from './Task'\nexport default Task\n","import { connect } from 'react-redux'\n\nimport Task from '../components/Task'\nimport { toggleTaskCompletion } from '../actions'\n\nconst mapStateToProps = (state, props) => ({\n  ...props,\n  project: state.projects[props.projectId]\n})\n\nconst mapDispatchToProps = dispatch => ({\n  toggleTaskCompletion: id => dispatch(toggleTaskCompletion(id))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Task)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { SearchBar, SegmentedControl, WingBlank } from 'antd-mobile'\n\nimport sortOptions from './sortOptions'\n\nconst TaskFilter = ({ filter, setFilter, sortOption, setSortOption }) => {\n  const options = {\n    [sortOptions.NAME]: 'Name',\n    [sortOptions.START_DATE]: 'Date'\n  }\n\n  const optionNames = Object.values(options)\n  const optionIndex = Object.keys(options).indexOf(sortOption)\n\n  const onSelectOption = name => {\n    const option = Object.keys(options).find(key => options[key] === name)\n    setSortOption(option)\n  }\n\n  return (\n    <>\n      <SearchBar\n        value={filter}\n        placeholder=\"Search\"\n        maxLength={8}\n        cancelText={'Cancel'}\n        onChange={setFilter}\n      />\n      <WingBlank>\n        <SegmentedControl\n          values={optionNames}\n          onValueChange={onSelectOption}\n          selectedIndex={optionIndex}\n        />\n      </WingBlank>\n    </>\n  )\n}\n\nTaskFilter.propTypes = {\n  filter: PropTypes.string,\n  setFilter: PropTypes.func.isRequired,\n  sortOption: PropTypes.oneOf([sortOptions.NAME, sortOptions.START_DATE]),\n  setSortOption: PropTypes.func.isRequired\n}\n\nTaskFilter.displayName = 'TaskFilter'\n\nexport default TaskFilter\n","import TaskFilter from './TaskFilter'\nexport default TaskFilter\n","import { connect } from 'react-redux'\n\nimport TaskFilter from '../components/TaskFilter'\nimport { setTaskFilter, setTaskSortOption } from '../actions'\n\nconst mapStateToProps = state => ({\n  filter: state.ui.taskFilter,\n  sortOption: state.ui.taskSortOption\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: search => dispatch(setTaskFilter(search)),\n  setSortOption: option => dispatch(setTaskSortOption(option))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskFilter)\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { List } from 'antd-mobile'\n\nimport AddTaskButton from './AddTaskButton'\nimport Task from '../../containers/Task'\nimport TaskForm from '../../containers/Forms/Task'\nimport TaskFilter from '../../containers/TaskFilter'\n\nconst TaskList = ({ addTask, projectId, projectTitle, tasks, removeTask }) => {\n  const [isFormVisible, setFormVisibility] = useState(false)\n  const [taskToEdit, setTaskToEdit] = useState(null)\n\n  const renderNewForm = () => {\n    return (\n      <TaskForm\n        task={taskToEdit}\n        projectId={projectId}\n        addTask={addTask}\n        onClose={() => setFormVisibility(false)}\n      />\n    )\n  }\n\n  const onEdit = task => {\n    setTaskToEdit(task)\n    setFormVisibility(true)\n  }\n\n  if (isFormVisible) {\n    return renderNewForm()\n  }\n\n  return (\n    <>\n      <TaskFilter />\n      <List renderHeader={() => projectTitle}>\n        {tasks.map(task => (\n          <Task\n            key={task.id}\n            onEdit={() => onEdit(task)}\n            onDelete={() => removeTask(task.id)}\n            showProjectTitle={!projectId}\n            {...task}\n          />\n        ))}\n        <AddTaskButton onClick={() => setFormVisibility(true)} />\n      </List>\n    </>\n  )\n}\n\nTaskList.propTypes = {\n  addTask: PropTypes.func,\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      completed: PropTypes.bool\n    })\n  )\n}\n\nTaskList.defaultProps = {}\n\nTaskList.displayName = 'TaskList'\n\nexport default TaskList\n","import TaskList from './TaskList'\nexport default TaskList\n","import { connect } from 'react-redux'\n\nimport TaskList from '../components/TaskList'\nimport { addTask, removeTask } from '../actions'\nimport sortOptions from '../components/TaskFilter/sortOptions'\n\nconst getProjectTitle = state => {\n  const { projects, ui } = state\n  return projects[ui.activeProject].title\n}\n\nconst sortByStartDate = (a, b) => a.startTime - b.endTime\n\nconst sortByTitle = (a, b) => {\n  const textA = a.title.toUpperCase()\n  const textB = b.title.toUpperCase()\n  return textA < textB ? -1 : textA > textB ? 1 : 0\n}\n\nconst sortMap = {\n  [sortOptions.NAME]: sortByTitle,\n  [sortOptions.START_DATE]: sortByStartDate\n}\n\nconst getVisibleTasks = state => {\n  const { activeProject, taskFilter, taskSortOption } = state.ui\n\n  return Object.values(state.tasks)\n    .filter(t => {\n      if (taskFilter && t.title) {\n        return t.projectId === activeProject && t.title.includes(taskFilter)\n      }\n      return t.projectId === activeProject\n    })\n    .sort(sortMap[taskSortOption])\n}\n\nconst mapStateToProps = state => ({\n  projectTitle: getProjectTitle(state),\n  projectId: state.ui.activeProject,\n  tasks: getVisibleTasks(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  addTask: data => dispatch(addTask(data)),\n  removeTask: data => dispatch(removeTask(data))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskList)\n","import { connect } from 'react-redux'\n\nimport TaskList from '../components/TaskList'\nimport { addTask } from '../actions'\nimport sortOptions from '../components/TaskFilter/sortOptions'\n\nconst sortByStartDate = (a, b) => a.startTime - b.endTime\n\nconst sortByTitle = (a, b) => {\n  const textA = a.title.toUpperCase()\n  const textB = b.title.toUpperCase()\n  return textA < textB ? -1 : textA > textB ? 1 : 0\n}\n\nconst sortMap = {\n  [sortOptions.NAME]: sortByTitle,\n  [sortOptions.START_DATE]: sortByStartDate\n}\n\nconst getVisibleTasks = state => {\n  const { taskFilter, taskSortOption } = state.ui\n\n  return Object.values(state.tasks)\n    .filter(t => {\n      return t.title.includes(taskFilter)\n    })\n    .sort(sortMap[taskSortOption])\n}\n\nconst mapStateToProps = state => ({\n  tasks: getVisibleTasks(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  addTask: data => dispatch(addTask(data))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskList)\n","import React from 'react'\nimport Div100vh from 'react-div-100vh'\nimport { NavBar, SegmentedControl } from 'antd-mobile'\n\nimport Calendar from './containers/Calendar'\n\nimport initialState from './config/initialState'\n\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\n\n// eslint-disable-next-line\nimport styles from './App.css'\n\nimport ProjectList from './containers/ProjectList'\nimport TaskList from './containers/TaskList'\nimport Overview from './containers/Overview'\n\nconst VIEW_PROJECTS = 'Projects'\nconst VIEW_CALENDAR = 'Calendar'\nconst VIEW_TASKS = 'Tasks'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.setActiveProject = this.setActiveProject.bind(this)\n  }\n\n  state = {\n    ...initialState,\n    docked: false,\n    activeView: VIEW_PROJECTS\n  }\n\n  onChangeView = event => {\n    this.setState({\n      activeView: event.nativeEvent.value\n    })\n  }\n\n  setActiveProject(index) {\n    this.setState({\n      ...this.state,\n      ui: {\n        ...this.state.ui,\n        activeProject: index\n      }\n    })\n  }\n\n  render() {\n    const { activeView } = this.state\n    const listActive = activeView === VIEW_PROJECTS\n    const calendarActive = activeView === VIEW_CALENDAR\n    const overviewActive = activeView === VIEW_TASKS\n\n    const views = [VIEW_CALENDAR, VIEW_PROJECTS, VIEW_TASKS]\n\n    return (\n      <Div100vh>\n        <div className={'main-area'}>\n          {listActive && (\n            <>\n              <div className={'left-column'}>\n                <ProjectList setActiveProject={this.setActiveProject} />\n              </div>\n              <div className={'right-column'}>\n                <TaskList />\n              </div>\n            </>\n          )}\n          {calendarActive && <Calendar />}\n          {overviewActive && (\n            <div className={'overview'}>\n              <Overview />\n            </div>\n          )}\n        </div>\n\n        <NavBar mode={'light'}>\n          <SegmentedControl\n            values={views}\n            onChange={this.onChangeView}\n            className={'viewSwitch'}\n            selectedIndex={views.indexOf(activeView)}\n          />\n        </NavBar>\n      </Div100vh>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","const getRandomColor = () => {\n  const h = Math.floor(Math.random() * 360),\n    s = 30 + Math.floor(Math.random() * 70) + '%',\n    l = Math.floor(Math.random() * 60) + '%'\n  return `hsl(${h},${s},${l})`\n}\n\nexport { getRandomColor }\n","import { getRandomColor } from '../utils'\n\nconst uuid = require('uuid/v1')\n\nconst projects = (state = [], action) => {\n  const newUuid = uuid()\n  switch (action.type) {\n    case 'ADD_PROJECT':\n      return {\n        ...state,\n        [newUuid]: {\n          id: newUuid,\n          color: getRandomColor(),\n          ...action.data\n        }\n      }\n    default:\n      return state\n  }\n}\n\nexport default projects\n","const uuid = require('uuid/v1')\n\nconst ui = (state = {}, action) => {\n  switch (action.type) {\n    case 'TOGGLE_TASK_COMPLETION':\n      const id = action.id\n      return {\n        ...state,\n        [id]: {\n          ...state[id],\n          completed: !state[id].completed\n        }\n      }\n    case 'ADD_TASK':\n      const newUuid = uuid()\n      return {\n        ...state,\n        [newUuid]: {\n          id: newUuid,\n          ...action.data\n        }\n      }\n    case 'UPDATE_TASK':\n      return {\n        ...state,\n        [action.data.id]: {\n          ...action.data\n        }\n      }\n    case 'REMOVE_TASK':\n      const newState = { ...state }\n      delete newState[action.id]\n      return newState\n    default:\n      return state\n  }\n}\n\nexport default ui\n","const ui = (state = [], action) => {\n  switch (action.type) {\n    case 'SELECT_PROJECT':\n      return {\n        ...state,\n        activeProject: action.id\n      }\n    case 'SET_TASK_SORT_OPTION':\n      return {\n        ...state,\n        taskSortOption: action.option\n      }\n    case 'SET_TASK_FILTER':\n      return {\n        ...state,\n        taskFilter: action.search\n      }\n    default:\n      return state\n  }\n}\n\nexport default ui\n","import { combineReducers } from 'redux'\nimport projects from './projects'\nimport tasks from './tasks'\nimport ui from './ui'\n\nexport default combineReducers({\n  projects,\n  tasks,\n  ui\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport { LocaleProvider } from 'antd-mobile'\nimport enUS from 'antd-mobile/lib/locale-provider/en_US'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport rootReducer from './reducers'\n\nimport initialState from './config/initialState'\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <LocaleProvider locale={enUS}>\n      <App />\n    </LocaleProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}